/*
This program computes the distance to goal (i.e. the cost of the least-cost path to the goal)
of every state from which the goal can be reached.
It does this by executing Dijkstra's algorithm backwards from the goal.
It prints on stdout the number of states at each distance from goal and, if a filename is
provided as a command line argument, it prints the state_map it builds to that file.

Copyright (C) 2013 by the PSVN Research Group, University of Alberta
*/

#include <vector>
#include <sstream>
#include <stack>

struct Nodo
{
    state_t estado;
    int altura;
};

int main(int argc, char **argv) {
    int64_t numAtD = 0, ant_numAtD = 0;
    state_t state, estado_raiz, child;
    int cota_altura = 0, ruleid;
    int limProfundidad = 0, hist, childHist;
    ruleid_iterator_t iter;
    double factor_rami = 0.0;
    //PriorityQueue<state_t> open;
    std::stack<Nodo> open;
    std::stack<int> historia;
    Nodo nodo, hijo;


    // Partir desde un estado meta.
    first_goal_state(&estado_raiz, &cota_altura);

    // Leer argumentos. Limite de la profundidad
    if (argc > 1) {
        if ( ! (std::istringstream(argv[1]) >> limProfundidad) ) limProfundidad = 0;
    }

    printf("----------------------------------------\n");
    printf("Depth %16s %4s%s\n", "Nro. Estados", " ", "Fac. Ram.");
    printf("----------------------------------------\n");

    cota_altura = 0;
    for (cota_altura = 0; cota_altura <= limProfundidad; cota_altura += 1)
    {
        numAtD = 0;
        nodo.estado = estado_raiz;
        nodo.altura = 0;
        open.push(nodo);
        historia.push(init_history);
        while( !open.empty()) {
            nodo = open.top();
            hist = historia.top();
            open.pop();
            historia.pop();
            if( nodo.altura > cota_altura) {
                continue;
            }
            else if (nodo.altura == cota_altura) {
                numAtD += 1;
            } else {
                state = nodo.estado;
                init_fwd_iter(&iter, &state);
                while( (ruleid = next_ruleid(&iter) ) >= 0 ) {
                    if (!fwd_rule_valid_for_history(hist,ruleid))
                        continue;
                    apply_fwd_rule(ruleid, &state, &child);
                    /*printf("altura: %d, estado:  ",nodo.altura + 1);
                    print_state(stdout,&child);
                    printf("\n");*/
                    hijo.estado = child;
                    hijo.altura = nodo.altura + 1;
                    open.push(hijo);
                    historia.push(next_fwd_history(hist,ruleid));
                }
            }
        }
        if (ant_numAtD == 0)
            factor_rami = numAtD / 1.0;
        else
            factor_rami = numAtD / ant_numAtD;

        //printf("%d / %d = %e\n", numAtD, ant_numAtD, numAtD / ant_numAtD);
        ant_numAtD = numAtD;
        printf("%3d %3s%15"PRId64"%4s%6.2e\n", cota_altura, " "
               , numAtD, " ", factor_rami);

    }

    printf("----------------------------------------\n");

    return 0;
}
